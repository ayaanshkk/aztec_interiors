import os
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime

def generate_pdf(data, output_name):
    """
    Generate a formatted PDF from structured form data
    
    Args:
        data (dict): Structured form data
        output_name (str): Output filename
        
    Returns:
        str: Path to generated PDF
    """
    try:
        # Create output directory if it doesn't exist
        output_dir = "generated_pdfs"
        os.makedirs(output_dir, exist_ok=True)
        
        pdf_path = os.path.join(output_dir, output_name)
        
        # Create PDF document
        doc = SimpleDocTemplate(pdf_path, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # Add title
        title = Paragraph("Kitchen Form Data", styles['Title'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Add generation timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        date_para = Paragraph(f"Generated on: {timestamp}", styles['Normal'])
        story.append(date_para)
        story.append(Spacer(1, 20))
        
        # Prepare data for table
        table_data = []
        
        # Add header row
        table_data.append(['Field', 'Value'])
        
        # Add data rows
        for key, value in data.items():
            if value is not None and str(value).strip():  # Only include non-empty values
                formatted_key = key.replace('_', ' ').title()
                formatted_value = str(value) if value else 'Not specified'
                table_data.append([formatted_key, formatted_value])
        
        # Create table
        if len(table_data) > 1:  # If we have data beyond the header
            table = Table(table_data, colWidths=[2.5*inch, 4*inch])
            
            # Style the table
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey])
            ]))
            
            story.append(table)
        else:
            # If no valid data found
            no_data_para = Paragraph("No valid data extracted from the form.", styles['Normal'])
            story.append(no_data_para)
        
        # Add footer
        story.append(Spacer(1, 30))
        footer = Paragraph("Generated by Kitchen Form Processing System", styles['Italic'])
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        
        print(f"PDF generated successfully: {pdf_path}")
        return pdf_path
        
    except Exception as e:
        print(f"Error generating PDF: {str(e)}")
        # Fallback to simple PDF generation
        return generate_simple_pdf(data, output_name)

def generate_simple_pdf(data, output_name):
    """
    Fallback method for simple PDF generation using basic canvas
    
    Args:
        data (dict): Structured form data
        output_name (str): Output filename
        
    Returns:
        str: Path to generated PDF
    """
    try:
        output_dir = "generated_pdfs"
        os.makedirs(output_dir, exist_ok=True)
        pdf_path = os.path.join(output_dir, output_name)
        
        c = canvas.Canvas(pdf_path, pagesize=A4)
        width, height = A4
        
        # Title
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 50, "Kitchen Form Data")
        
        # Timestamp
        c.setFont("Helvetica", 10)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.drawString(50, height - 80, f"Generated on: {timestamp}")
        
        # Data
        y = height - 120
        c.setFont("Helvetica", 12)
        
        for key, value in data.items():
            if value is not None and str(value).strip():
                formatted_key = key.replace('_', ' ').title()
                formatted_value = str(value) if value else 'Not specified'
                
                # Handle long values
                if len(formatted_value) > 60:
                    formatted_value = formatted_value[:60] + "..."
                
                text_line = f"{formatted_key}: {formatted_value}"
                c.drawString(50, y, text_line)
                y -= 25
                
                # Create new page if running out of space
                if y < 50:
                    c.showPage()
                    c.setFont("Helvetica", 12)
                    y = height - 50
        
        c.save()
        return pdf_path
        
    except Exception as e:
        print(f"Error in simple PDF generation: {str(e)}")
        raise e